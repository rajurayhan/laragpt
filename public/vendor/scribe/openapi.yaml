openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/register:
    post:
      summary: 'Register a new user.'
      operationId: registerANewUser
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john.doe@example.com
                    created_at: '2023-07-28 12:00:00'
                    updated_at: '2023-07-28 12:00:00'
                  token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john.doe@example.com
                      created_at:
                        type: string
                        example: '2023-07-28 12:00:00'
                      updated_at:
                        type: string
                        example: '2023-07-28 12:00:00'
                  token:
                    type: string
                    example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    email:
                      - 'The email has already been taken.'
                properties:
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email has already been taken.'
                        items:
                          type: string
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: 'John Doe'
                email:
                  type: string
                  description: 'The email of the user.'
                  example: john.doe@example.com
                password:
                  type: string
                  description: 'The password of the user.'
                  example: secret
              required:
                - name
                - email
                - password
      security: []
  /api/login:
    post:
      summary: 'Log in a user.'
      operationId: logInAUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john.doe@example.com
                    created_at: '2023-07-28 12:00:00'
                    updated_at: '2023-07-28 12:00:00'
                  token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john.doe@example.com
                      created_at:
                        type: string
                        example: '2023-07-28 12:00:00'
                      updated_at:
                        type: string
                        example: '2023-07-28 12:00:00'
                  token:
                    type: string
                    example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid credentials'
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: john.doe@example.com
                password:
                  type: string
                  description: 'The password of the user.'
                  example: secret
              required:
                - email
                - password
      security: []
  /api/deliverables:
    post:
      summary: 'Create Deliverable'
      operationId: createDeliverable
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Deliverable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scopeOfWorkId:
                  type: integer
                  description: 'Id of the ScopeOfWork.'
                  example: 16
              required:
                - scopeOfWorkId
      security: []
  '/api/deliverables/{id}':
    post:
      summary: 'Update Deliverable'
      operationId: updateDeliverable
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Deliverable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deliverablesText:
                  type: string
                  description: 'text of the Deliverables.'
                  example: dolorem
              required:
                - deliverablesText
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Id of the Deliverables.'
        example: 10
        required: true
        schema:
          type: integer
  /api/completion:
    post:
      summary: ''
      operationId: postApiCompletion
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/image:
    post:
      summary: ''
      operationId: postApiImage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/meeting-summery:
    get:
      summary: 'Get Meeting Summery List'
      operationId: getMeetingSummeryList
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'page number.'
          example: 15
          required: false
          schema:
            type: integer
            description: 'page number.'
            example: 15
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  total: 6
                  current_page: 15
                properties:
                  data:
                    type: array
                    example: []
                  total:
                    type: integer
                    example: 6
                  current_page:
                    type: integer
                    example: 15
      tags:
        - 'Meeting Summery'
      security: []
    post:
      summary: 'Create Meeting Summery'
      operationId: createMeetingSummery
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Meeting Summery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clickupLink:
                  type: string
                  description: 'Task url for the meeting.'
                  example: fugit
                tldvLink:
                  type: string
                  description: 'Tldv meeting url.'
                  example: labore
                transcriptText:
                  type: string
                  description: 'The text of the transcript.'
                  example: iusto
                meetingName:
                  type: string
                  description: 'Name of the meeting.'
                  example: nam
                meetingType:
                  type: integer
                  description: 'Meeting type [1: Client, 2: Intenal].'
                  example: 3
              required:
                - transcriptText
                - meetingName
                - meetingType
      security: []
  '/api/meeting-summery/{id}':
    get:
      summary: 'Show Meeting Summery'
      operationId: showMeetingSummery
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Data Showed Successfully'
                  data:
                    id: 12
                    transcriptText: "Hussain at LHG: And that requires some clarification. I know like obviously Jennifer would be the better person to do that. But if you can give us some context on that, so I think that would be real help until she's back. Okay. Perfect. so Oh, yeah.\r\n\r\nRaju at LHG: It is Jolene. So let me ask you some. Stuff that's needs to be cleared. So there are a lot of pages and forms in your existing website. So but on the front end part, there is one single lending page and there is a clickable link that makes you to a new website. So we are. Like confused how those forms and pages are being used is it? used by some external websites or like any idea on it?\r\n\r\nJolene: So when? The gsgla volunteerapps.com is the main website. right We have different departments within organization that require different forms for different business processes. So we create a form either formidable or gravity. And then we give it a URL slug that's specific to that process. So. it would be like gsgla volunteer apps if you go go into like the That's right. or yeah. Okay. And go down to pages. Go to all pages. yeah outages and then scroll down let's get a good one for you. Um click on the 2023 golden ticket contest listen Mm-hmm. And then on the right hand side the page there is a URL that's volunteer apps.org slash golden ticket. Go ahead and click it.\r\n\r\nRaju at LHG: On the right side. Yep. listen\r\n\r\nJolene: Yeah, there you go. And you can open that page from there. But this does not show anything. so It should be opening in a new window. It opened in a new window. Let me just hear that. Yeah, so that's the the form is closed. So that's why it says that but that's the idea where we have a department send us a layout for a form we build a form and then we make a unique URL slug for that form that URL is given hmm to the department that requested it and then they send that website link out to wherever it needs to go. so mostly it's sent via email, right? Okay. Yeah.\r\n\r\nRaju at LHG: Yeah, okay. So yeah Hussain I got done so actually\r\n\r\nHussain at LHG: Okay, and just one thing like this website that is connected to this like sorry linked not connected. It's Girl Scout La dot org. So this is a standalone website. It is only linked to this. right Yeah. And you are managing this from and from another dashboard or something.\r\n\r\nJolene: So the gsgla.org website is a separate. entity\r\n\r\nHussain at LHG: Okay, so like this is something built on some different.\r\n\r\nJolene: Yeah, this is designed by and maintained by a whole different department than ours.\r\n\r\nHussain at LHG: Okay. Okay. Perfect. So we are only responsible for gsgl level interior App Store.\r\n\r\nJolene: Yeah, that's all we really need to worry about. The gsgla.org is not.\r\n\r\nHussain at LHG: hmm Okay, so yeah Raju.\r\n\r\nRaju at LHG: And we need access on the Bluehost or dreamhost right Hussain hosting provider. Let me check. It's dream. Yeah. So. We had the credentials but we couldn't log in actually it says a link was sent to verify the device and location. But can you share on which email it was sent?\r\n\r\nJolene: Yeah, so it's set up with our data account email. so I know that you've been trying to log in because I've seen the emails pop up where it's asking you to verify your your your email address so can I hear our development email So, I don't know. so that you can adjust that? You sure.\r\n\r\nHussain at LHG: Are Raju if you can try accessing now, and if she receive any Ling or something? Oh, yeah, that would work. Do you want to share your screen I so I can stop presenting so she can see that. here one minute. So Jolene Jennifer is on vacations.\r\n\r\nJolene: Yeah, she's on holiday break and she won't be back until the 9th of January.\r\n\r\nHussain at LHG: Okay, and like she mostly deals with like these forms and like this part of the website, right I'm sorry. What was that question? Like she's more into this website thing. Oh, yeah. Okay, perfect. So I'm sharing my screen now. Perfect.\r\n\r\nRaju at LHG: So, can you please verify my request?\r\n\r\nJolene: Yeah. Still waiting for the email to come in. So you can set it again. I'm still waiting for the email to come in. It's still hasn't shown up yet.\r\n\r\nRaju at LHG: So this form is currently active, right? Yeah. Okay, can you guide me on which page it was used? which paid like this what? form is being used summer, right? on and\r\n\r\nJolene: Yeah, it is. um, I would search a hundred Girl Scout stories\r\n\r\nRaju at LHG: like it would help us to test real name. Okay. Got it.\r\n\r\nHussain at LHG: Right. There is a type of dreamhost Spelling is like. was it verified? And he had still hasn't come in yet. Oh, okay. but\r\n\r\nRaju at LHG: Okay, let me know. Let me show you our development Hussain. Can you confirm if there is already any existing client email setup for this account? dream of you No, no like. we have email for our every client, right?\r\n\r\nHussain at LHG: Yeah, yeah. Yeah, there is. Can you share that? Okay, just one second. So that is Girls, let me drop it in the chat.\r\n\r\nRaju at LHG: Yep. So Jolene, you can just adjust that email with this email Hussain just provided in that case will be able to verify ourselves. without interrupting you students\r\n\r\nJolene: Okay. Yeah, I have the email now. Do you want me to forward it to you or do you want me to just\r\n\r\nRaju at LHG: Okay, you can just verify it and we'll try logging in again.\r\n\r\nJolene: It's asking me to log in from the new IP address. yeah. So should I forward it to you? um, yeah, you can forward it to this Yep.\r\n\r\nHussain at LHG: email and Raju can pick it from there.\r\n\r\nJolene: to the Girl Scouts of Greater Los Angeles email Yeah. Okay.\r\n\r\nHussain at LHG: Because I think it is mentioned like click the link in that email from your current IP. Yeah, so Raju needs to click on that link that you would forward. Okay.\r\n\r\nRaju at LHG: Hussain is that email forwarded to a vegetablement? That will be forwarded to everywhere. Okay, I can see it here.\r\n\r\nHussain at LHG: I have not received it either. So I'm just waiting. Let me okay. Yeah. yeah, I this ask did you receive?\r\n\r\nRaju at LHG: yep. Perfect. Okay, sweet. Let me in. So I was able to log into the account actually. sorry. Yeah, I I was able to login.\r\n\r\nHussain at LHG: Okay, you're perfect. Perfect. and besides that there was that we can forward you are Jolene Uh-huh. that we require some plugging credentials so we can forward you that and And the exit that we have so there are some staff only pages I believe. so this is yeah. So we can forward you what our findings and besides that Raju. Do you have anything else? Now we are good support. Okay, good so far. Okay. All right. So since you are not feeling well, so we'll let you go and hope you would start feeling better soon and it Okay. would be anything so we will reach you out. Why email and until then have a good\r\n\r\n: Okay. Absolutely. Happy holidays to you both.\r\n\r\nHussain at LHG: Happy holidays. Thank you Jolene. Thank you for jumping in. get\r\n\r\nJolene: No problem. Bye guys. Thank you. by\r\n\r\nHussain at LHG: Good. Bye. Raju Hello."
                    meetingSummeryText: "### Call/Meeting Participants:\n- Hussain at LHG (Lighthouse Group)\n- Raju at LHG (Lighthouse Group)\n- Jolene (Client representative)\n\n### Meeting Summary:\nDuring the call, Hussain and Raju from LHG sought clarification on various aspects of the client's website, particularly about the use of forms and pages that were not immediately visible on the front-end. Jolene explained that their main website, gsgla volunteerapps.com, hosts various forms created with Formidable or Gravity Forms, each with a unique URL slug corresponding to different business processes within their organization. These links are distributed by the relevant departments as needed, often via email.\n\nThe discussion also touched upon the relationship between gsgla volunteerapps.com and another website, GirlScoutLA.org, which Jolene clarified as being a separate entity managed by a different department. Hussain and Raju's responsibility was confirmed to be limited to the gsgla volunteerapps.com website.\n\nRaju brought up issues with accessing the hosting provider, DreamHost, due to verification emails not being received. Jolene confirmed that she had seen the verification requests and that the emails were being sent to a specific data account. After some back-and-forth, Jolene agreed to adjust the email settings to use an email provided by Hussain, allowing the LHG team to verify themselves in the future without needing to interrupt Jolene.\n\nRaju managed to log into the DreamHost account successfully after the email was forwarded. Finally, Hussain mentioned that they would send Jolene a list of required plugin credentials and their findings on staff-only pages for further assistance.\n\n### Next Steps/Tasks:\n- **Jolene:**\n  - [ ] Adjust the email settings in DreamHost to the email provided by Hussain to facilitate future verifications by the LHG team.\n  - [ ] Forward the verification email to the LHG team to allow Raju to log in from the new IP address.\n  - [ ] Receive and act upon the list of required plugin credentials and findings on staff-only pages that Hussain will send.\n\n- **Raju at LHG:**\n  - [ ] Confirm successful login to DreamHost account and proceed with the necessary work.\n  - [ ] Review the list of plugin credentials and findings on staff-only pages once forwarded by Hussain.\n\n- **Hussain at LHG:**\n  - [ ] Provide Jolene with the list of required plugin credentials and findings on staff-only pages.\n  - [ ] Follow up with any additional requests or queries via email during Jolene's colleague's absence."
                    meetingName: 'Meeting with Jolene (Girl Scouts LA)'
                    meetingType: 2
                    clickupLink: 'https://app.clickup.com/t/86a1qnn0u'
                    tldvLink: 'https://tldv.io/app/meetings/65831d8a4805760013063c13?sortBy=by_tags'
                    created_at: '2023-12-20T17:25:05.000000Z'
                    updated_at: '2023-12-20T18:02:21.000000Z'
                    htmlText: "<h3>Call/Meeting Participants:</h3>\n<ul>\n<li>Hussain at LHG (Lighthouse Group)</li>\n<li>Raju at LHG (Lighthouse Group)</li>\n<li>Jolene (Client representative)</li>\n</ul>\n<h3>Meeting Summary:</h3>\n<p>During the call, Hussain and Raju from LHG sought clarification on various aspects of the client's website, particularly about the use of forms and pages that were not immediately visible on the front-end. Jolene explained that their main website, gsgla volunteerapps.com, hosts various forms created with Formidable or Gravity Forms, each with a unique URL slug corresponding to different business processes within their organization. These links are distributed by the relevant departments as needed, often via email.</p>\n<p>The discussion also touched upon the relationship between gsgla volunteerapps.com and another website, GirlScoutLA.org, which Jolene clarified as being a separate entity managed by a different department. Hussain and Raju's responsibility was confirmed to be limited to the gsgla volunteerapps.com website.</p>\n<p>Raju brought up issues with accessing the hosting provider, DreamHost, due to verification emails not being received. Jolene confirmed that she had seen the verification requests and that the emails were being sent to a specific data account. After some back-and-forth, Jolene agreed to adjust the email settings to use an email provided by Hussain, allowing the LHG team to verify themselves in the future without needing to interrupt Jolene.</p>\n<p>Raju managed to log into the DreamHost account successfully after the email was forwarded. Finally, Hussain mentioned that they would send Jolene a list of required plugin credentials and their findings on staff-only pages for further assistance.</p>\n<h3>Next Steps/Tasks:</h3>\n<ul>\n<li>\n<p><strong>Jolene:</strong></p>\n<ul>\n<li>[ ] Adjust the email settings in DreamHost to the email provided by Hussain to facilitate future verifications by the LHG team.</li>\n<li>[ ] Forward the verification email to the LHG team to allow Raju to log in from the new IP address.</li>\n<li>[ ] Receive and act upon the list of required plugin credentials and findings on staff-only pages that Hussain will send.</li>\n</ul>\n</li>\n<li>\n<p><strong>Raju at LHG:</strong></p>\n<ul>\n<li>[ ] Confirm successful login to DreamHost account and proceed with the necessary work.</li>\n<li>[ ] Review the list of plugin credentials and findings on staff-only pages once forwarded by Hussain.</li>\n</ul>\n</li>\n<li>\n<p><strong>Hussain at LHG:</strong></p>\n<ul>\n<li>[ ] Provide Jolene with the list of required plugin credentials and findings on staff-only pages.</li>\n<li>[ ] Follow up with any additional requests or queries via email during Jolene's colleague's absence.</li>\n</ul>\n</li>\n</ul>\n"
                properties:
                  message:
                    type: string
                    example: 'Data Showed Successfully'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 12
                      transcriptText:
                        type: string
                        example: "Hussain at LHG: And that requires some clarification. I know like obviously Jennifer would be the better person to do that. But if you can give us some context on that, so I think that would be real help until she's back. Okay. Perfect. so Oh, yeah.\r\n\r\nRaju at LHG: It is Jolene. So let me ask you some. Stuff that's needs to be cleared. So there are a lot of pages and forms in your existing website. So but on the front end part, there is one single lending page and there is a clickable link that makes you to a new website. So we are. Like confused how those forms and pages are being used is it? used by some external websites or like any idea on it?\r\n\r\nJolene: So when? The gsgla volunteerapps.com is the main website. right We have different departments within organization that require different forms for different business processes. So we create a form either formidable or gravity. And then we give it a URL slug that's specific to that process. So. it would be like gsgla volunteer apps if you go go into like the That's right. or yeah. Okay. And go down to pages. Go to all pages. yeah outages and then scroll down let's get a good one for you. Um click on the 2023 golden ticket contest listen Mm-hmm. And then on the right hand side the page there is a URL that's volunteer apps.org slash golden ticket. Go ahead and click it.\r\n\r\nRaju at LHG: On the right side. Yep. listen\r\n\r\nJolene: Yeah, there you go. And you can open that page from there. But this does not show anything. so It should be opening in a new window. It opened in a new window. Let me just hear that. Yeah, so that's the the form is closed. So that's why it says that but that's the idea where we have a department send us a layout for a form we build a form and then we make a unique URL slug for that form that URL is given hmm to the department that requested it and then they send that website link out to wherever it needs to go. so mostly it's sent via email, right? Okay. Yeah.\r\n\r\nRaju at LHG: Yeah, okay. So yeah Hussain I got done so actually\r\n\r\nHussain at LHG: Okay, and just one thing like this website that is connected to this like sorry linked not connected. It's Girl Scout La dot org. So this is a standalone website. It is only linked to this. right Yeah. And you are managing this from and from another dashboard or something.\r\n\r\nJolene: So the gsgla.org website is a separate. entity\r\n\r\nHussain at LHG: Okay, so like this is something built on some different.\r\n\r\nJolene: Yeah, this is designed by and maintained by a whole different department than ours.\r\n\r\nHussain at LHG: Okay. Okay. Perfect. So we are only responsible for gsgl level interior App Store.\r\n\r\nJolene: Yeah, that's all we really need to worry about. The gsgla.org is not.\r\n\r\nHussain at LHG: hmm Okay, so yeah Raju.\r\n\r\nRaju at LHG: And we need access on the Bluehost or dreamhost right Hussain hosting provider. Let me check. It's dream. Yeah. So. We had the credentials but we couldn't log in actually it says a link was sent to verify the device and location. But can you share on which email it was sent?\r\n\r\nJolene: Yeah, so it's set up with our data account email. so I know that you've been trying to log in because I've seen the emails pop up where it's asking you to verify your your your email address so can I hear our development email So, I don't know. so that you can adjust that? You sure.\r\n\r\nHussain at LHG: Are Raju if you can try accessing now, and if she receive any Ling or something? Oh, yeah, that would work. Do you want to share your screen I so I can stop presenting so she can see that. here one minute. So Jolene Jennifer is on vacations.\r\n\r\nJolene: Yeah, she's on holiday break and she won't be back until the 9th of January.\r\n\r\nHussain at LHG: Okay, and like she mostly deals with like these forms and like this part of the website, right I'm sorry. What was that question? Like she's more into this website thing. Oh, yeah. Okay, perfect. So I'm sharing my screen now. Perfect.\r\n\r\nRaju at LHG: So, can you please verify my request?\r\n\r\nJolene: Yeah. Still waiting for the email to come in. So you can set it again. I'm still waiting for the email to come in. It's still hasn't shown up yet.\r\n\r\nRaju at LHG: So this form is currently active, right? Yeah. Okay, can you guide me on which page it was used? which paid like this what? form is being used summer, right? on and\r\n\r\nJolene: Yeah, it is. um, I would search a hundred Girl Scout stories\r\n\r\nRaju at LHG: like it would help us to test real name. Okay. Got it.\r\n\r\nHussain at LHG: Right. There is a type of dreamhost Spelling is like. was it verified? And he had still hasn't come in yet. Oh, okay. but\r\n\r\nRaju at LHG: Okay, let me know. Let me show you our development Hussain. Can you confirm if there is already any existing client email setup for this account? dream of you No, no like. we have email for our every client, right?\r\n\r\nHussain at LHG: Yeah, yeah. Yeah, there is. Can you share that? Okay, just one second. So that is Girls, let me drop it in the chat.\r\n\r\nRaju at LHG: Yep. So Jolene, you can just adjust that email with this email Hussain just provided in that case will be able to verify ourselves. without interrupting you students\r\n\r\nJolene: Okay. Yeah, I have the email now. Do you want me to forward it to you or do you want me to just\r\n\r\nRaju at LHG: Okay, you can just verify it and we'll try logging in again.\r\n\r\nJolene: It's asking me to log in from the new IP address. yeah. So should I forward it to you? um, yeah, you can forward it to this Yep.\r\n\r\nHussain at LHG: email and Raju can pick it from there.\r\n\r\nJolene: to the Girl Scouts of Greater Los Angeles email Yeah. Okay.\r\n\r\nHussain at LHG: Because I think it is mentioned like click the link in that email from your current IP. Yeah, so Raju needs to click on that link that you would forward. Okay.\r\n\r\nRaju at LHG: Hussain is that email forwarded to a vegetablement? That will be forwarded to everywhere. Okay, I can see it here.\r\n\r\nHussain at LHG: I have not received it either. So I'm just waiting. Let me okay. Yeah. yeah, I this ask did you receive?\r\n\r\nRaju at LHG: yep. Perfect. Okay, sweet. Let me in. So I was able to log into the account actually. sorry. Yeah, I I was able to login.\r\n\r\nHussain at LHG: Okay, you're perfect. Perfect. and besides that there was that we can forward you are Jolene Uh-huh. that we require some plugging credentials so we can forward you that and And the exit that we have so there are some staff only pages I believe. so this is yeah. So we can forward you what our findings and besides that Raju. Do you have anything else? Now we are good support. Okay, good so far. Okay. All right. So since you are not feeling well, so we'll let you go and hope you would start feeling better soon and it Okay. would be anything so we will reach you out. Why email and until then have a good\r\n\r\n: Okay. Absolutely. Happy holidays to you both.\r\n\r\nHussain at LHG: Happy holidays. Thank you Jolene. Thank you for jumping in. get\r\n\r\nJolene: No problem. Bye guys. Thank you. by\r\n\r\nHussain at LHG: Good. Bye. Raju Hello."
                      meetingSummeryText:
                        type: string
                        example: "### Call/Meeting Participants:\n- Hussain at LHG (Lighthouse Group)\n- Raju at LHG (Lighthouse Group)\n- Jolene (Client representative)\n\n### Meeting Summary:\nDuring the call, Hussain and Raju from LHG sought clarification on various aspects of the client's website, particularly about the use of forms and pages that were not immediately visible on the front-end. Jolene explained that their main website, gsgla volunteerapps.com, hosts various forms created with Formidable or Gravity Forms, each with a unique URL slug corresponding to different business processes within their organization. These links are distributed by the relevant departments as needed, often via email.\n\nThe discussion also touched upon the relationship between gsgla volunteerapps.com and another website, GirlScoutLA.org, which Jolene clarified as being a separate entity managed by a different department. Hussain and Raju's responsibility was confirmed to be limited to the gsgla volunteerapps.com website.\n\nRaju brought up issues with accessing the hosting provider, DreamHost, due to verification emails not being received. Jolene confirmed that she had seen the verification requests and that the emails were being sent to a specific data account. After some back-and-forth, Jolene agreed to adjust the email settings to use an email provided by Hussain, allowing the LHG team to verify themselves in the future without needing to interrupt Jolene.\n\nRaju managed to log into the DreamHost account successfully after the email was forwarded. Finally, Hussain mentioned that they would send Jolene a list of required plugin credentials and their findings on staff-only pages for further assistance.\n\n### Next Steps/Tasks:\n- **Jolene:**\n  - [ ] Adjust the email settings in DreamHost to the email provided by Hussain to facilitate future verifications by the LHG team.\n  - [ ] Forward the verification email to the LHG team to allow Raju to log in from the new IP address.\n  - [ ] Receive and act upon the list of required plugin credentials and findings on staff-only pages that Hussain will send.\n\n- **Raju at LHG:**\n  - [ ] Confirm successful login to DreamHost account and proceed with the necessary work.\n  - [ ] Review the list of plugin credentials and findings on staff-only pages once forwarded by Hussain.\n\n- **Hussain at LHG:**\n  - [ ] Provide Jolene with the list of required plugin credentials and findings on staff-only pages.\n  - [ ] Follow up with any additional requests or queries via email during Jolene's colleague's absence."
                      meetingName:
                        type: string
                        example: 'Meeting with Jolene (Girl Scouts LA)'
                      meetingType:
                        type: integer
                        example: 2
                      clickupLink:
                        type: string
                        example: 'https://app.clickup.com/t/86a1qnn0u'
                      tldvLink:
                        type: string
                        example: 'https://tldv.io/app/meetings/65831d8a4805760013063c13?sortBy=by_tags'
                      created_at:
                        type: string
                        example: '2023-12-20T17:25:05.000000Z'
                      updated_at:
                        type: string
                        example: '2023-12-20T18:02:21.000000Z'
                      htmlText:
                        type: string
                        example: "<h3>Call/Meeting Participants:</h3>\n<ul>\n<li>Hussain at LHG (Lighthouse Group)</li>\n<li>Raju at LHG (Lighthouse Group)</li>\n<li>Jolene (Client representative)</li>\n</ul>\n<h3>Meeting Summary:</h3>\n<p>During the call, Hussain and Raju from LHG sought clarification on various aspects of the client's website, particularly about the use of forms and pages that were not immediately visible on the front-end. Jolene explained that their main website, gsgla volunteerapps.com, hosts various forms created with Formidable or Gravity Forms, each with a unique URL slug corresponding to different business processes within their organization. These links are distributed by the relevant departments as needed, often via email.</p>\n<p>The discussion also touched upon the relationship between gsgla volunteerapps.com and another website, GirlScoutLA.org, which Jolene clarified as being a separate entity managed by a different department. Hussain and Raju's responsibility was confirmed to be limited to the gsgla volunteerapps.com website.</p>\n<p>Raju brought up issues with accessing the hosting provider, DreamHost, due to verification emails not being received. Jolene confirmed that she had seen the verification requests and that the emails were being sent to a specific data account. After some back-and-forth, Jolene agreed to adjust the email settings to use an email provided by Hussain, allowing the LHG team to verify themselves in the future without needing to interrupt Jolene.</p>\n<p>Raju managed to log into the DreamHost account successfully after the email was forwarded. Finally, Hussain mentioned that they would send Jolene a list of required plugin credentials and their findings on staff-only pages for further assistance.</p>\n<h3>Next Steps/Tasks:</h3>\n<ul>\n<li>\n<p><strong>Jolene:</strong></p>\n<ul>\n<li>[ ] Adjust the email settings in DreamHost to the email provided by Hussain to facilitate future verifications by the LHG team.</li>\n<li>[ ] Forward the verification email to the LHG team to allow Raju to log in from the new IP address.</li>\n<li>[ ] Receive and act upon the list of required plugin credentials and findings on staff-only pages that Hussain will send.</li>\n</ul>\n</li>\n<li>\n<p><strong>Raju at LHG:</strong></p>\n<ul>\n<li>[ ] Confirm successful login to DreamHost account and proceed with the necessary work.</li>\n<li>[ ] Review the list of plugin credentials and findings on staff-only pages once forwarded by Hussain.</li>\n</ul>\n</li>\n<li>\n<p><strong>Hussain at LHG:</strong></p>\n<ul>\n<li>[ ] Provide Jolene with the list of required plugin credentials and findings on staff-only pages.</li>\n<li>[ ] Follow up with any additional requests or queries via email during Jolene's colleague's absence.</li>\n</ul>\n</li>\n</ul>\n"
      tags:
        - 'Meeting Summery'
      security: []
    put:
      summary: 'Update Meeting Summery'
      operationId: updateMeetingSummery
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Meeting Summery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pushToClickUp:
                  type: boolean
                  description: ''
                  example: true
                clickupLink:
                  type: string
                  description: 'Task url for the meeting.'
                  example: quis
                summaryText:
                  type: string
                  description: ''
                  example: quia
                tldvLink:
                  type: string
                  description: 'Tldv meeting url.'
                  example: molestias
                transcriptText:
                  type: string
                  description: 'The text of the transcript.'
                  example: molestias
                meetingName:
                  type: string
                  description: 'Name of the meeting.'
                  example: animi
                meetingType:
                  type: integer
                  description: 'Meeting type [1: Client, 2: Intenal].'
                  example: 19
              required:
                - pushToClickUp
                - summaryText
                - transcriptText
                - meetingName
                - meetingType
      security: []
    delete:
      summary: 'Meeting Summery'
      operationId: meetingSummery
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Meeting Summery'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. Id of the transcript.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 12
  /api/problems-and-goals:
    post:
      summary: 'Create Problems and Goals'
      operationId: createProblemsAndGoals
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Problems and Goals'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transcriptId:
                  type: integer
                  description: 'Id of the transcript.'
                  example: 10
              required:
                - transcriptId
      security: []
  '/api/problems-and-goals/{id}':
    post:
      summary: 'Update Problems and Goals'
      operationId: updateProblemsAndGoals
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Problems and Goals'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                problemGoalText:
                  type: string
                  description: 'text of the ProblemsAndGoals.'
                  example: vero
              required:
                - problemGoalText
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Id of the problems and goals.'
        example: 5
        required: true
        schema:
          type: integer
  /api/project-components:
    get:
      summary: 'Get all project components'
      operationId: getAllProjectComponents
      description: 'Get a list of all project components.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      project_id: 1
                      component_id: 1
                      quantity: 3
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    -
                      project_id: 1
                      component_id: 2
                      quantity: 2
                      created_at: '2023-07-02T09:00:00Z'
                      updated_at: '2023-07-02T09:30:00Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        project_id: 1
                        component_id: 1
                        quantity: 3
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-01T12:30:00Z'
                      -
                        project_id: 1
                        component_id: 2
                        quantity: 2
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-02T09:30:00Z'
                    items:
                      type: object
                      properties:
                        project_id:
                          type: integer
                          example: 1
                        component_id:
                          type: integer
                          example: 1
                        quantity:
                          type: integer
                          example: 3
                        created_at:
                          type: string
                          example: '2023-07-01T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2023-07-01T12:30:00Z'
      tags:
        - 'Project Components'
      security: []
    post:
      summary: 'Add components to a project'
      operationId: addComponentsToAProject
      description: 'Add website components to a specific project.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      project_id: 1
                      component_id: 1
                      quantity: 3
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    -
                      project_id: 1
                      component_id: 2
                      quantity: 2
                      created_at: '2023-07-02T09:00:00Z'
                      updated_at: '2023-07-02T09:30:00Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        project_id: 1
                        component_id: 1
                        quantity: 3
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-01T12:30:00Z'
                      -
                        project_id: 1
                        component_id: 2
                        quantity: 2
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-02T09:30:00Z'
                    items:
                      type: object
                      properties:
                        project_id:
                          type: integer
                          example: 1
                        component_id:
                          type: integer
                          example: 1
                        quantity:
                          type: integer
                          example: 3
                        created_at:
                          type: string
                          example: '2023-07-01T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2023-07-01T12:30:00Z'
      tags:
        - 'Project Components'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: 'The ID of the project.'
                  example: 1
                components:
                  type: array
                  description: 'An array of component details.'
                  example:
                    - qui
                  items:
                    type: string
              required:
                - project_id
                - components
      security: []
  '/api/project-components/{id}':
    get:
      summary: 'Show a project component'
      operationId: showAProjectComponent
      description: 'Get details of a specific project component grouped by category_id.'
      parameters:
        -
          in: query
          name: project_id
          description: 'The ID of the project.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the project.'
            example: '1'
        -
          in: query
          name: component_id
          description: 'The ID of the website component.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    category_id_1:
                      category_name: 'Category A'
                      total_cost: 1500
                      components:
                        -
                          project_id: 1
                          component_id: 1
                          component_name: 'Component X'
                          quantity: 3
                          total_component_cost: 900
                          created_at: '2023-07-01T12:00:00Z'
                          updated_at: '2023-07-01T12:30:00Z'
                        -
                          project_id: 1
                          component_id: 2
                          component_name: 'Component Y'
                          quantity: 2
                          total_component_cost: 600
                          created_at: '2023-07-02T09:00:00Z'
                          updated_at: '2023-07-02T09:30:00Z'
                    category_id_2:
                      category_name: 'Category B'
                      total_cost: 500
                      components:
                        -
                          project_id: 1
                          component_id: 3
                          component_name: 'Component Z'
                          quantity: 1
                          total_component_cost: 500
                          created_at: '2023-07-03T10:00:00Z'
                          updated_at: '2023-07-03T10:30:00Z'
                  grand_total: 2000
                properties:
                  data:
                    type: object
                    properties:
                      category_id_1:
                        type: object
                        properties:
                          category_name:
                            type: string
                            example: 'Category A'
                          total_cost:
                            type: integer
                            example: 1500
                          components:
                            type: array
                            example:
                              -
                                project_id: 1
                                component_id: 1
                                component_name: 'Component X'
                                quantity: 3
                                total_component_cost: 900
                                created_at: '2023-07-01T12:00:00Z'
                                updated_at: '2023-07-01T12:30:00Z'
                              -
                                project_id: 1
                                component_id: 2
                                component_name: 'Component Y'
                                quantity: 2
                                total_component_cost: 600
                                created_at: '2023-07-02T09:00:00Z'
                                updated_at: '2023-07-02T09:30:00Z'
                            items:
                              type: object
                              properties:
                                project_id:
                                  type: integer
                                  example: 1
                                component_id:
                                  type: integer
                                  example: 1
                                component_name:
                                  type: string
                                  example: 'Component X'
                                quantity:
                                  type: integer
                                  example: 3
                                total_component_cost:
                                  type: integer
                                  example: 900
                                created_at:
                                  type: string
                                  example: '2023-07-01T12:00:00Z'
                                updated_at:
                                  type: string
                                  example: '2023-07-01T12:30:00Z'
                      category_id_2:
                        type: object
                        properties:
                          category_name:
                            type: string
                            example: 'Category B'
                          total_cost:
                            type: integer
                            example: 500
                          components:
                            type: array
                            example:
                              -
                                project_id: 1
                                component_id: 3
                                component_name: 'Component Z'
                                quantity: 1
                                total_component_cost: 500
                                created_at: '2023-07-03T10:00:00Z'
                                updated_at: '2023-07-03T10:30:00Z'
                            items:
                              type: object
                              properties:
                                project_id:
                                  type: integer
                                  example: 1
                                component_id:
                                  type: integer
                                  example: 3
                                component_name:
                                  type: string
                                  example: 'Component Z'
                                quantity:
                                  type: integer
                                  example: 1
                                total_component_cost:
                                  type: integer
                                  example: 500
                                created_at:
                                  type: string
                                  example: '2023-07-03T10:00:00Z'
                                updated_at:
                                  type: string
                                  example: '2023-07-03T10:30:00Z'
                  grand_total:
                    type: integer
                    example: 2000
      tags:
        - 'Project Components'
      security: []
    put:
      summary: 'Update components of a project'
      operationId: updateComponentsOfAProject
      description: 'Update details of website components in a specific project.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      project_id: 1
                      component_id: 1
                      quantity: 5
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-03T09:30:00Z'
                    -
                      project_id: 1
                      component_id: 2
                      quantity: 3
                      created_at: '2023-07-02T09:00:00Z'
                      updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        project_id: 1
                        component_id: 1
                        quantity: 5
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-03T09:30:00Z'
                      -
                        project_id: 1
                        component_id: 2
                        quantity: 3
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-03T09:30:00Z'
                    items:
                      type: object
                      properties:
                        project_id:
                          type: integer
                          example: 1
                        component_id:
                          type: integer
                          example: 1
                        quantity:
                          type: integer
                          example: 5
                        created_at:
                          type: string
                          example: '2023-07-01T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2023-07-03T09:30:00Z'
      tags:
        - 'Project Components'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                components:
                  type: array
                  description: 'An array of component details.'
                  example:
                    - vitae
                  items:
                    type: string
                project_id:
                  type: integer
                  description: 'The ID of the project.'
                  example: 1
              required:
                - components
                - project_id
      security: []
    delete:
      summary: 'Delete a project component'
      operationId: deleteAProjectComponent
      description: 'Delete a specific project component.'
      parameters:
        -
          in: query
          name: project_id
          description: 'The ID of the project.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the project.'
            example: '1'
        -
          in: query
          name: component_id
          description: 'The ID of the website component.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Project component deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Project component deleted successfully'
      tags:
        - 'Project Components'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project component.'
        example: sapiente
        required: true
        schema:
          type: string
  /api/project-overview:
    post:
      summary: 'Create Project Overview'
      operationId: createProjectOverview
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Overview'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                problemGoalID:
                  type: integer
                  description: 'Id of the ProblemsAndGoals.'
                  example: 12
              required:
                - problemGoalID
      security: []
  '/api/project-overview/{id}':
    post:
      summary: 'Update Project Overview'
      operationId: updateProjectOverview
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Overview'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                overviewText:
                  type: string
                  description: 'text of the ProjectOverview.'
                  example: eos
              required:
                - overviewText
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Id of the ProjectOverview.'
        example: 3
        required: true
        schema:
          type: integer
  /api/projects:
    get:
      summary: 'Get all projects'
      operationId: getAllProjects
      description: 'Get a list of all projects.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      project_id: 1
                      project_name: 'Project A'
                      project_description: 'This is project A'
                      total_cost: '1000.00'
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    -
                      project_id: 2
                      project_name: 'Project B'
                      project_description: 'This is project B'
                      total_cost: '2000.00'
                      created_at: '2023-07-02T09:00:00Z'
                      updated_at: '2023-07-02T09:30:00Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        project_id: 1
                        project_name: 'Project A'
                        project_description: 'This is project A'
                        total_cost: '1000.00'
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-01T12:30:00Z'
                      -
                        project_id: 2
                        project_name: 'Project B'
                        project_description: 'This is project B'
                        total_cost: '2000.00'
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-02T09:30:00Z'
                    items:
                      type: object
                      properties:
                        project_id:
                          type: integer
                          example: 1
                        project_name:
                          type: string
                          example: 'Project A'
                        project_description:
                          type: string
                          example: 'This is project A'
                        total_cost:
                          type: string
                          example: '1000.00'
                        created_at:
                          type: string
                          example: '2023-07-01T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2023-07-01T12:30:00Z'
      tags:
        - Projects
      security: []
    post:
      summary: 'Store a new project'
      operationId: storeANewProject
      description: 'Create a new project.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    project_id: 3
                    project_name: 'Project C'
                    project_description: 'This is project C'
                    total_cost: '3000.00'
                    created_at: '2023-07-03T09:00:00Z'
                    updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      project_id:
                        type: integer
                        example: 3
                      project_name:
                        type: string
                        example: 'Project C'
                      project_description:
                        type: string
                        example: 'This is project C'
                      total_cost:
                        type: string
                        example: '3000.00'
                      created_at:
                        type: string
                        example: '2023-07-03T09:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-03T09:30:00Z'
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_name:
                  type: string
                  description: 'The name of the project.'
                  example: 'Project C'
                project_description:
                  type: string
                  description: 'The description of the project.'
                  example: 'This is project C'
                total_cost:
                  type: numeric
                  description: 'The total cost of the project.'
                  example: '3000.00'
              required:
                - project_name
                - project_description
                - total_cost
      security: []
  '/api/projects/{project_id}':
    get:
      summary: 'Show a project'
      operationId: showAProject
      description: 'Get details of a specific project.'
      parameters:
        -
          in: query
          name: project_id
          description: 'The ID of the project.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the project.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    project_id: 1
                    project_name: 'Project A'
                    project_description: 'This is project A'
                    total_cost: '1000.00'
                    created_at: '2023-07-01T12:00:00Z'
                    updated_at: '2023-07-01T12:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      project_id:
                        type: integer
                        example: 1
                      project_name:
                        type: string
                        example: 'Project A'
                      project_description:
                        type: string
                        example: 'This is project A'
                      total_cost:
                        type: string
                        example: '1000.00'
                      created_at:
                        type: string
                        example: '2023-07-01T12:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-01T12:30:00Z'
      tags:
        - Projects
      security: []
    put:
      summary: 'Update a project'
      operationId: updateAProject
      description: 'Update details of a specific project.'
      parameters:
        -
          in: query
          name: project_id
          description: 'The ID of the project.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the project.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    project_id: 1
                    project_name: 'Updated Project A'
                    project_description: 'Updated project A description'
                    total_cost: '1200.00'
                    created_at: '2023-07-01T12:00:00Z'
                    updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      project_id:
                        type: integer
                        example: 1
                      project_name:
                        type: string
                        example: 'Updated Project A'
                      project_description:
                        type: string
                        example: 'Updated project A description'
                      total_cost:
                        type: string
                        example: '1200.00'
                      created_at:
                        type: string
                        example: '2023-07-01T12:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-03T09:30:00Z'
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_name:
                  type: string
                  description: 'The name of the project.'
                  example: 'Updated Project A'
                project_description:
                  type: string
                  description: 'The description of the project.'
                  example: 'Updated project A description'
                total_cost:
                  type: numeric
                  description: 'The total cost of the project.'
                  example: '1200.00'
              required:
                - project_name
                - project_description
                - total_cost
      security: []
    delete:
      summary: 'Delete a project'
      operationId: deleteAProject
      description: 'Delete a specific project.'
      parameters:
        -
          in: query
          name: project_id
          description: 'The ID of the project.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the project.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Project deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Project deleted successfully'
      tags:
        - Projects
      security: []
    parameters:
      -
        in: path
        name: project_id
        description: 'The ID of the project.'
        example: 8
        required: true
        schema:
          type: integer
  /api/prompts:
    get:
      summary: 'Display a listing of prompts.'
      operationId: displayAListingOfPrompts
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      type: 1
                      name: PROJECT_SUMMARY
                      prompt: 'This is a transcript of a sales call with a potential new client for our other company, Defense Acquisition Solutions Group. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps," which should be in bullet point format. Be sure to identify which person from the "Call Participants" is responsible for each "Next Steps" item and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                      created_at: '2023-12-12T18:41:37.000000Z'
                      updated_at: '2023-12-12T18:41:37.000000Z'
                    -
                      id: 2
                      type: 2
                      name: PROBLEMS_AND_GOALS
                      prompt: "Help me turn the following transcript from a virtual meeting I had with a potential client into bullet points that address the client's problems and goals. The potential client is looking for help from our company, to help solve their problems and accomplish their goals with the services we offer."
                      created_at: '2023-12-12T18:41:37.000000Z'
                      updated_at: '2023-12-12T18:41:37.000000Z'
                    -
                      id: 3
                      type: 3
                      name: PROJECT_OVERVIEW
                      prompt: 'Help me take the following points that were put together from a conversation I had with a potential client asking for our businesses to help and turn them into paragraphs. I need this text to be a very easy-to-read, well-written, and detailed project description/overview. Put into paragraph format only that is easy to read.'
                      created_at: '2023-12-12T18:41:37.000000Z'
                      updated_at: '2023-12-12T18:41:37.000000Z'
                    -
                      id: 4
                      type: 4
                      name: SCOPE_OF_WORK
                      prompt: 'I need your help in creating a very detailed bullet list for a scope of work based on the following Problems & Goals bullet list I created before. I need your help in making sure the new scope of work list you will be creating is very detailed and expanded upon as much as you can so we make sure nothing is missed for the project scope. I will end up using what you come up with in a proposal for a potential client who reached out to our company, asking us for help in the form of the services we offer. Be sure to add in quality control and testing items if not already mentioned in the list that I am providing you with. Please feel free to add the additional scope of work points that you think are missing and need to be added based on the main service the client is asking for our help with.'
                      created_at: '2023-12-12T18:41:37.000000Z'
                      updated_at: '2023-12-12T18:41:37.000000Z'
                    -
                      id: 5
                      type: 5
                      name: DELIVERABLES
                      prompt: 'Help me take the following SOW list for a new project and turn them into matching \"Deliverables\" items. Remember that for every individual SOW list item, make sure you have a deliverable that matches. The formatting for this list should be in bullet point format. Then, take the same list you just created and provide me an estimate of how many hours and a timeline it would take to complete each of the deliverable items.'
                      created_at: '2023-12-12T18:41:37.000000Z'
                      updated_at: '2023-12-12T18:41:37.000000Z'
                    -
                      id: 6
                      type: 6
                      name: MEETING_SUMMARY
                      prompt: 'This is a transcript of a meeting that I had with a client. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call/Meeting Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps/Tasks," which should be in bullet point format. Be sure to identify which person from the "Call/Meeting Participants" is responsible for each "Next Steps/Tasks" item, break each item into individual bullet points and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                      created_at: '2023-12-12T18:41:37.000000Z'
                      updated_at: '2023-12-12T18:41:37.000000Z'
                  total: 6
                  current_page: 1
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        type: 1
                        name: PROJECT_SUMMARY
                        prompt: 'This is a transcript of a sales call with a potential new client for our other company, Defense Acquisition Solutions Group. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps," which should be in bullet point format. Be sure to identify which person from the "Call Participants" is responsible for each "Next Steps" item and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                        created_at: '2023-12-12T18:41:37.000000Z'
                        updated_at: '2023-12-12T18:41:37.000000Z'
                      -
                        id: 2
                        type: 2
                        name: PROBLEMS_AND_GOALS
                        prompt: "Help me turn the following transcript from a virtual meeting I had with a potential client into bullet points that address the client's problems and goals. The potential client is looking for help from our company, to help solve their problems and accomplish their goals with the services we offer."
                        created_at: '2023-12-12T18:41:37.000000Z'
                        updated_at: '2023-12-12T18:41:37.000000Z'
                      -
                        id: 3
                        type: 3
                        name: PROJECT_OVERVIEW
                        prompt: 'Help me take the following points that were put together from a conversation I had with a potential client asking for our businesses to help and turn them into paragraphs. I need this text to be a very easy-to-read, well-written, and detailed project description/overview. Put into paragraph format only that is easy to read.'
                        created_at: '2023-12-12T18:41:37.000000Z'
                        updated_at: '2023-12-12T18:41:37.000000Z'
                      -
                        id: 4
                        type: 4
                        name: SCOPE_OF_WORK
                        prompt: 'I need your help in creating a very detailed bullet list for a scope of work based on the following Problems & Goals bullet list I created before. I need your help in making sure the new scope of work list you will be creating is very detailed and expanded upon as much as you can so we make sure nothing is missed for the project scope. I will end up using what you come up with in a proposal for a potential client who reached out to our company, asking us for help in the form of the services we offer. Be sure to add in quality control and testing items if not already mentioned in the list that I am providing you with. Please feel free to add the additional scope of work points that you think are missing and need to be added based on the main service the client is asking for our help with.'
                        created_at: '2023-12-12T18:41:37.000000Z'
                        updated_at: '2023-12-12T18:41:37.000000Z'
                      -
                        id: 5
                        type: 5
                        name: DELIVERABLES
                        prompt: 'Help me take the following SOW list for a new project and turn them into matching \"Deliverables\" items. Remember that for every individual SOW list item, make sure you have a deliverable that matches. The formatting for this list should be in bullet point format. Then, take the same list you just created and provide me an estimate of how many hours and a timeline it would take to complete each of the deliverable items.'
                        created_at: '2023-12-12T18:41:37.000000Z'
                        updated_at: '2023-12-12T18:41:37.000000Z'
                      -
                        id: 6
                        type: 6
                        name: MEETING_SUMMARY
                        prompt: 'This is a transcript of a meeting that I had with a client. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call/Meeting Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps/Tasks," which should be in bullet point format. Be sure to identify which person from the "Call/Meeting Participants" is responsible for each "Next Steps/Tasks" item, break each item into individual bullet points and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                        created_at: '2023-12-12T18:41:37.000000Z'
                        updated_at: '2023-12-12T18:41:37.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        type:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: PROJECT_SUMMARY
                        prompt:
                          type: string
                          example: 'This is a transcript of a sales call with a potential new client for our other company, Defense Acquisition Solutions Group. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps," which should be in bullet point format. Be sure to identify which person from the "Call Participants" is responsible for each "Next Steps" item and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                        created_at:
                          type: string
                          example: '2023-12-12T18:41:37.000000Z'
                        updated_at:
                          type: string
                          example: '2023-12-12T18:41:37.000000Z'
                  total:
                    type: integer
                    example: 6
                  current_page:
                    type: integer
                    example: 1
      tags:
        - 'Prompts Management'
      security: []
    post:
      summary: 'Store a newly created prompt.'
      operationId: storeANewlyCreatedPrompt
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Prompts Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: integer
                  description: 'The type of the prompt (corresponding to PromptType Enum values).'
                  example: 1
                prompt:
                  type: string
                  description: 'The content of the prompt.'
                  example: '"Example prompt content."'
                name:
                  type: string
                  description: 'The name of the prompt.'
                  example: '"Example prompt name."'
              required:
                - type
                - prompt
                - name
      security: []
  '/api/prompts/{id}':
    get:
      summary: 'Display the specified prompt.'
      operationId: displayTheSpecifiedPrompt
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'View Successfully '
                  data:
                    id: 1
                    type: 1
                    name: PROJECT_SUMMARY
                    prompt: 'This is a transcript of a sales call with a potential new client for our other company, Defense Acquisition Solutions Group. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps," which should be in bullet point format. Be sure to identify which person from the "Call Participants" is responsible for each "Next Steps" item and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                    created_at: '2023-12-12T18:41:37.000000Z'
                    updated_at: '2023-12-12T18:41:37.000000Z'
                properties:
                  message:
                    type: string
                    example: 'View Successfully '
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      type:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: PROJECT_SUMMARY
                      prompt:
                        type: string
                        example: 'This is a transcript of a sales call with a potential new client for our other company, Defense Acquisition Solutions Group. Can you help me turn the transcript into a summary of the call/meeting and what we discussed? The format should include "Call Participants," which should be in bullet point format; "Meeting Summary," which should be in multiple paragraph format; and "Next Steps," which should be in bullet point format. Be sure to identify which person from the "Call Participants" is responsible for each "Next Steps" item and give some additional context and information in order to make sure each Next Step is clear for the person that needs to complete it.'
                      created_at:
                        type: string
                        example: '2023-12-12T18:41:37.000000Z'
                      updated_at:
                        type: string
                        example: '2023-12-12T18:41:37.000000Z'
      tags:
        - 'Prompts Management'
      security: []
    put:
      summary: 'Update the specified prompt.'
      operationId: updateTheSpecifiedPrompt
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Prompts Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: integer
                  description: 'The type of the prompt (corresponding to PromptType Enum values).'
                  example: 2
                prompt:
                  type: string
                  description: 'The content of the prompt.'
                  example: '"Updated prompt content."'
                name:
                  type: string
                  description: 'The content of the name.'
                  example: '"Updated prompt name."'
              required:
                - type
                - prompt
                - name
      security: []
    delete:
      summary: 'Remove the specified prompt from storage.'
      operationId: removeTheSpecifiedPromptFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Prompts Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the prompt.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: prompt
        description: 'The ID of the prompt to display.'
        example: '1'
        required: true
        schema:
          type: string
  /api/project-summery:
    get:
      summary: 'Get SOW Meeting Summery List'
      operationId: getSOWMeetingSummeryList
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'page number.'
          example: 16
          required: false
          schema:
            type: integer
            description: 'page number.'
            example: 16
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  total: 6
                  current_page: 16
                properties:
                  data:
                    type: array
                    example: []
                  total:
                    type: integer
                    example: 6
                  current_page:
                    type: integer
                    example: 16
      tags:
        - 'SOW Meeting Summery'
      security: []
    post:
      summary: 'Create SOW Meeting Summery'
      operationId: createSOWMeetingSummery
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'SOW Meeting Summery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transcriptId:
                  type: integer
                  description: 'The id of the transcript to regenrate.'
                  example: 20
                transcriptText:
                  type: string
                  description: 'The text of the transcript.'
                  example: nihil
                projectName:
                  type: string
                  description: 'The name of the project.'
                  example: eos
                projectType:
                  type: integer
                  description: 'The type of the project.'
                  example: 4
                company:
                  type: string
                  description: 'The company name of the project.'
                  example: molestiae
                clientPhone:
                  type: string
                  description: 'The phone number of the client.'
                  example: minima
                clientEmail:
                  type: string
                  description: 'The email of the client.'
                  example: ernser.arlene@example.org
                clientWebsite:
                  type: string
                  description: 'The website of the client.'
                  example: reiciendis
              required:
                - transcriptText
                - projectName
                - projectType
                - company
      security: []
  '/api/project-summery/{id}':
    get:
      summary: 'Show SOW Meeting Summery'
      operationId: showSOWMeetingSummery
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Data Showed Successfully'
                  data: null
                properties:
                  message:
                    type: string
                    example: 'Data Showed Successfully'
                  data:
                    type: string
                    example: null
      tags:
        - 'SOW Meeting Summery'
      security: []
    put:
      summary: 'Update SOW Meeting Summery'
      operationId: updateSOWMeetingSummery
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'SOW Meeting Summery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                summaryText:
                  type: integer
                  description: 'summaryText of the SOW Meeting Summery.'
                  example: 2
              required:
                - summaryText
      security: []
    delete:
      summary: 'Delete SOW Meeting Summery'
      operationId: deleteSOWMeetingSummery
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'SOW Meeting Summery'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. Id of the transcript.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 6
  /api/scope-of-work:
    post:
      summary: 'Create Scope Of Work'
      operationId: createScopeOfWork
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Scope Of Work'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                problemGoalID:
                  type: integer
                  description: 'Id of the ProblemsAndGoals.'
                  example: 2
              required:
                - problemGoalID
      security: []
  '/api/scope-of-work/{id}':
    post:
      summary: 'Update Scope Of Work'
      operationId: updateScopeOfWork
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Scope Of Work'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scopeText:
                  type: string
                  description: 'text of the Scope of Work.'
                  example: illo
              required:
                - scopeText
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Id of the Scope of Work.'
        example: 11
        required: true
        schema:
          type: integer
  /api/service-deliverables-tasks:
    get:
      summary: 'Get all Service Deliverable Tasks'
      operationId: getAllServiceDeliverableTasks
      description: 'Get a list of all Service Deliverable Tasks.'
      parameters:
        -
          in: query
          name: page
          description: 'page number.'
          example: 17
          required: false
          schema:
            type: integer
            description: 'page number.'
            example: 17
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  total: 0
                  current_page: 17
                properties:
                  data:
                    type: array
                    example: []
                  total:
                    type: integer
                    example: 0
                  current_page:
                    type: integer
                    example: 17
      tags:
        - 'Service Deliverable Tasks'
      security: []
    post:
      summary: 'Store a new Service Deliverable Task'
      operationId: storeANewServiceDeliverableTask
      description: 'Create a new Service Deliverable Task.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Deliverable Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Service Deliverable Task.'
                  example: 'Design Phase Task'
                description:
                  type: string
                  description: 'The description of the Service Deliverable Task.'
                  example: 'Design logo'
                cost:
                  type: number
                  description: 'The cost of the Service Deliverable Task.'
                  example: 150.0
                serviceDeliverableId:
                  type: integer
                  description: 'The ID of the associated service deliverable.'
                  example: 3
              required:
                - name
                - description
                - cost
                - serviceDeliverableId
      security: []
  '/api/service-deliverables-tasks/{id}':
    get:
      summary: 'Show a Service Deliverable Task'
      operationId: showAServiceDeliverableTask
      description: 'Get details of a specific Service Deliverable Task.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Data Showed Successfully'
                  data: null
                properties:
                  message:
                    type: string
                    example: 'Data Showed Successfully'
                  data:
                    type: string
                    example: null
      tags:
        - 'Service Deliverable Tasks'
      security: []
    put:
      summary: 'Update a Service Deliverable Task'
      operationId: updateAServiceDeliverableTask
      description: 'Update details of a specific service deliverable task.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Deliverable Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the service deliverable task.'
                  example: 'Updated Design Phase Task'
                description:
                  type: string
                  description: 'The description of the service deliverable task.'
                  example: 'Updated description'
                cost:
                  type: number
                  description: 'The cost of the service deliverable task.'
                  example: 200.0
                serviceDeliverableId:
                  type: integer
                  description: 'The ID of the associated service deliverable.'
                  example: 18
              required:
                - name
      security: []
    delete:
      summary: 'Delete a Service Deliverable Task'
      operationId: deleteAServiceDeliverableTask
      description: 'Delete a specific service deliverable task.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Deliverable Tasks'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the Service Deliverable Task.'
        example: '1'
        required: true
        schema:
          type: string
  /api/service-deliverables:
    get:
      summary: 'Get all Service Deliverables'
      operationId: getAllServiceDeliverables
      description: 'Get a list of all Service Deliverables.'
      parameters:
        -
          in: query
          name: page
          description: 'page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'page number.'
            example: 1
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'Implementation Phase'
                      serviceScopeId: 2
                      created_at: '2023-12-27T12:36:09.000000Z'
                      updated_at: '2023-12-27T12:36:24.000000Z'
                  total: 1
                  current_page: 1
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Implementation Phase'
                        serviceScopeId: 2
                        created_at: '2023-12-27T12:36:09.000000Z'
                        updated_at: '2023-12-27T12:36:24.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Implementation Phase'
                        serviceScopeId:
                          type: integer
                          example: 2
                        created_at:
                          type: string
                          example: '2023-12-27T12:36:09.000000Z'
                        updated_at:
                          type: string
                          example: '2023-12-27T12:36:24.000000Z'
                  total:
                    type: integer
                    example: 1
                  current_page:
                    type: integer
                    example: 1
      tags:
        - 'Service Deliverables'
      security: []
    post:
      summary: 'Store a new Service Deliverable'
      operationId: storeANewServiceDeliverable
      description: 'Create a new Service Deliverable.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Deliverables'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Service Deliverable.'
                  example: 'Design Phase'
                serviceScopeId:
                  type: integer
                  description: 'The ID of the associated service scope.'
                  example: 3
              required:
                - name
                - serviceScopeId
      security: []
  '/api/service-deliverables/{id}':
    get:
      summary: 'Show a Service Deliverable'
      operationId: showAServiceDeliverable
      description: 'Get details of a specific Service Deliverable.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Data Showed Successfully'
                  data:
                    id: 1
                    name: 'Implementation Phase'
                    serviceScopeId: 2
                    created_at: '2023-12-27T12:36:09.000000Z'
                    updated_at: '2023-12-27T12:36:24.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Data Showed Successfully'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Implementation Phase'
                      serviceScopeId:
                        type: integer
                        example: 2
                      created_at:
                        type: string
                        example: '2023-12-27T12:36:09.000000Z'
                      updated_at:
                        type: string
                        example: '2023-12-27T12:36:24.000000Z'
      tags:
        - 'Service Deliverables'
      security: []
    put:
      summary: 'Update a Service Deliverable'
      operationId: updateAServiceDeliverable
      description: 'Update details of a specific service deliverable.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Deliverables'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the service deliverable.'
                  example: 'Implementation Phase'
                serviceScopeId:
                  type: integer
                  description: 'The ID of the associated service scope.'
                  example: 20
              required:
                - name
      security: []
    delete:
      summary: 'Delete a Service Deliverable'
      operationId: deleteAServiceDeliverable
      description: 'Delete a specific service deliverable.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Deliverables'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the Service Deliverable.'
        example: '1'
        required: true
        schema:
          type: string
  /api/service-scopes:
    get:
      summary: 'Get all Service Scopes'
      operationId: getAllServiceScopes
      description: 'Get a list of all Service Scopes.'
      parameters:
        -
          in: query
          name: page
          description: 'page number.'
          example: 5
          required: false
          schema:
            type: integer
            description: 'page number.'
            example: 5
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  total: 2
                  current_page: 5
                properties:
                  data:
                    type: array
                    example: []
                  total:
                    type: integer
                    example: 2
                  current_page:
                    type: integer
                    example: 5
      tags:
        - 'Service Scopes'
      security: []
    post:
      summary: 'Store a new Service Scope'
      operationId: storeANewServiceScope
      description: 'Create a new Service Scope.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Scopes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Service Scope.'
                  example: Basic
                serviceId:
                  type: integer
                  description: 'The ID of the associated service.'
                  example: 2
              required:
                - name
                - serviceId
      security: []
  '/api/service-scopes/{id}':
    get:
      summary: 'Show a Service Scope'
      operationId: showAServiceScope
      description: 'Get details of a specific Service Scope.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Data Showed Successfully'
                  data: null
                properties:
                  message:
                    type: string
                    example: 'Data Showed Successfully'
                  data:
                    type: string
                    example: null
      tags:
        - 'Service Scopes'
      security: []
    put:
      summary: 'Update a Service Scope'
      operationId: updateAServiceScope
      description: 'Update details of a specific service scope.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Scopes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the service scope.'
                  example: Advanced
                serviceId:
                  type: integer
                  description: 'The ID of the associated service.'
                  example: 1
              required:
                - name
      security: []
    delete:
      summary: 'Delete a Service Scope'
      operationId: deleteAServiceScope
      description: 'Delete a specific service scope.'
      parameters: []
      responses: {  }
      tags:
        - 'Service Scopes'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the Service Scope.'
        example: '1'
        required: true
        schema:
          type: string
  /api/services:
    get:
      summary: 'Get all Services'
      operationId: getAllServices
      description: 'Get a list of all Services.'
      parameters:
        -
          in: query
          name: page
          description: 'page number.'
          example: 16
          required: false
          schema:
            type: integer
            description: 'page number.'
            example: 16
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  total: 1
                  current_page: 16
                properties:
                  data:
                    type: array
                    example: []
                  total:
                    type: integer
                    example: 1
                  current_page:
                    type: integer
                    example: 16
      tags:
        - Services
      security: []
    post:
      summary: 'Store a new Service'
      operationId: storeANewService
      description: 'Create a new Service.'
      parameters: []
      responses: {  }
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Service.'
                  example: Header
              required:
                - name
      security: []
  '/api/services/{id}':
    get:
      summary: 'Show a Service'
      operationId: showAService
      description: 'Get details of a specific Service.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Data Showed Successfully'
                  data: null
                properties:
                  message:
                    type: string
                    example: 'Data Showed Successfully'
                  data:
                    type: string
                    example: null
      tags:
        - Services
      security: []
    put:
      summary: 'Update a website component category'
      operationId: updateAWebsiteComponentCategory
      description: 'Update details of a specific service.'
      parameters: []
      responses: {  }
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the service.'
                  example: 'Updated Header'
              required:
                - name
      security: []
    delete:
      summary: 'Delete a website component category'
      operationId: deleteAWebsiteComponentCategory
      description: 'Delete a specific website component category.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Website component category deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Website component category deleted successfully'
      tags:
        - Services
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the Service.'
        example: '1'
        required: true
        schema:
          type: string
  /api/categories:
    get:
      summary: 'Get all website component categories'
      operationId: getAllWebsiteComponentCategories
      description: 'Get a list of all website component categories.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      category_id: 1
                      category_name: Header
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    -
                      category_id: 2
                      category_name: Footer
                      created_at: '2023-07-02T09:00:00Z'
                      updated_at: '2023-07-02T09:30:00Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        category_id: 1
                        category_name: Header
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-01T12:30:00Z'
                      -
                        category_id: 2
                        category_name: Footer
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-02T09:30:00Z'
                    items:
                      type: object
                      properties:
                        category_id:
                          type: integer
                          example: 1
                        category_name:
                          type: string
                          example: Header
                        created_at:
                          type: string
                          example: '2023-07-01T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2023-07-01T12:30:00Z'
      tags:
        - 'Website Component Categories'
      security: []
    post:
      summary: 'Store a new website component category'
      operationId: storeANewWebsiteComponentCategory
      description: 'Create a new website component category.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    category_id: 3
                    category_name: Sidebar
                    created_at: '2023-07-03T09:00:00Z'
                    updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      category_id:
                        type: integer
                        example: 3
                      category_name:
                        type: string
                        example: Sidebar
                      created_at:
                        type: string
                        example: '2023-07-03T09:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-03T09:30:00Z'
      tags:
        - 'Website Component Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  description: 'The name of the website component category.'
                  example: Header
              required:
                - category_name
      security: []
  '/api/categories/{category_id}':
    get:
      summary: 'Show a website component category'
      operationId: showAWebsiteComponentCategory
      description: 'Get details of a specific website component category.'
      parameters:
        -
          in: query
          name: category_id
          description: 'The ID of the website component category.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component category.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    category_id: 1
                    category_name: Header
                    created_at: '2023-07-01T12:00:00Z'
                    updated_at: '2023-07-01T12:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      category_id:
                        type: integer
                        example: 1
                      category_name:
                        type: string
                        example: Header
                      created_at:
                        type: string
                        example: '2023-07-01T12:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-01T12:30:00Z'
      tags:
        - 'Website Component Categories'
      security: []
    put:
      summary: 'Update a website component category'
      operationId: updateAWebsiteComponentCategory
      description: 'Update details of a specific website component category.'
      parameters:
        -
          in: query
          name: category_id
          description: 'The ID of the website component category.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component category.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    category_id: 1
                    category_name: 'Updated Header'
                    created_at: '2023-07-01T12:00:00Z'
                    updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      category_id:
                        type: integer
                        example: 1
                      category_name:
                        type: string
                        example: 'Updated Header'
                      created_at:
                        type: string
                        example: '2023-07-01T12:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-03T09:30:00Z'
      tags:
        - 'Website Component Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  description: 'The name of the website component category.'
                  example: 'Updated Header'
              required:
                - category_name
      security: []
    delete:
      summary: 'Delete a website component category'
      operationId: deleteAWebsiteComponentCategory
      description: 'Delete a specific website component category.'
      parameters:
        -
          in: query
          name: category_id
          description: 'The ID of the website component category.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component category.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Website component category deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Website component category deleted successfully'
      tags:
        - 'Website Component Categories'
      security: []
    parameters:
      -
        in: path
        name: category_id
        description: 'The ID of the category.'
        example: 14
        required: true
        schema:
          type: integer
  /api/components:
    get:
      summary: 'Get all website components'
      operationId: getAllWebsiteComponents
      description: 'Get a list of all website components.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      component_id: 1
                      component_name: Logo
                      category_id: 1
                      component_description: 'Company logo for header'
                      component_cost: '50.00'
                      category:
                        category_id: 1
                        category_name: Header
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-01T12:30:00Z'
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    -
                      component_id: 2
                      component_name: 'Contact Form'
                      category_id: 1
                      component_description: 'Contact form for footer'
                      component_cost: '100.00'
                      category:
                        category_id: 1
                        category_name: Footer
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-02T09:30:00Z'
                      created_at: '2023-07-02T09:00:00Z'
                      updated_at: '2023-07-02T09:30:00Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        component_id: 1
                        component_name: Logo
                        category_id: 1
                        component_description: 'Company logo for header'
                        component_cost: '50.00'
                        category:
                          category_id: 1
                          category_name: Header
                          created_at: '2023-07-01T12:00:00Z'
                          updated_at: '2023-07-01T12:30:00Z'
                        created_at: '2023-07-01T12:00:00Z'
                        updated_at: '2023-07-01T12:30:00Z'
                      -
                        component_id: 2
                        component_name: 'Contact Form'
                        category_id: 1
                        component_description: 'Contact form for footer'
                        component_cost: '100.00'
                        category:
                          category_id: 1
                          category_name: Footer
                          created_at: '2023-07-02T09:00:00Z'
                          updated_at: '2023-07-02T09:30:00Z'
                        created_at: '2023-07-02T09:00:00Z'
                        updated_at: '2023-07-02T09:30:00Z'
                    items:
                      type: object
                      properties:
                        component_id:
                          type: integer
                          example: 1
                        component_name:
                          type: string
                          example: Logo
                        category_id:
                          type: integer
                          example: 1
                        component_description:
                          type: string
                          example: 'Company logo for header'
                        component_cost:
                          type: string
                          example: '50.00'
                        category:
                          type: object
                          properties:
                            category_id:
                              type: integer
                              example: 1
                            category_name:
                              type: string
                              example: Header
                            created_at:
                              type: string
                              example: '2023-07-01T12:00:00Z'
                            updated_at:
                              type: string
                              example: '2023-07-01T12:30:00Z'
                        created_at:
                          type: string
                          example: '2023-07-01T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2023-07-01T12:30:00Z'
      tags:
        - 'Website Components'
      security: []
    post:
      summary: 'Store a new website component'
      operationId: storeANewWebsiteComponent
      description: 'Create a new website component.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    component_id: 3
                    component_name: Banner
                    category_id: 1
                    component_description: 'Banner image for header'
                    component_cost: '80.00'
                    category:
                      category_id: 1
                      category_name: Header
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    created_at: '2023-07-03T09:00:00Z'
                    updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      component_id:
                        type: integer
                        example: 3
                      component_name:
                        type: string
                        example: Banner
                      category_id:
                        type: integer
                        example: 1
                      component_description:
                        type: string
                        example: 'Banner image for header'
                      component_cost:
                        type: string
                        example: '80.00'
                      category:
                        type: object
                        properties:
                          category_id:
                            type: integer
                            example: 1
                          category_name:
                            type: string
                            example: Header
                          created_at:
                            type: string
                            example: '2023-07-01T12:00:00Z'
                          updated_at:
                            type: string
                            example: '2023-07-01T12:30:00Z'
                      created_at:
                        type: string
                        example: '2023-07-03T09:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-03T09:30:00Z'
      tags:
        - 'Website Components'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component_name:
                  type: string
                  description: 'The name of the website component.'
                  example: Logo
                category_id:
                  type: integer
                  description: 'The ID of the website component category.'
                  example: 1
                component_description:
                  type: string
                  description: 'The description of the website component.'
                  example: 'Company logo for header'
                component_cost:
                  type: numeric
                  description: 'The cost of the website component.'
                  example: '50.00'
              required:
                - component_name
                - category_id
                - component_description
                - component_cost
      security: []
  '/api/components/{component_id}':
    get:
      summary: 'Show a website component'
      operationId: showAWebsiteComponent
      description: 'Get details of a specific website component.'
      parameters:
        -
          in: query
          name: component_id
          description: 'The ID of the website component.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    component_id: 1
                    component_name: Logo
                    category_id: 1
                    component_description: 'Company logo for header'
                    component_cost: '50.00'
                    category:
                      category_id: 1
                      category_name: Header
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    created_at: '2023-07-01T12:00:00Z'
                    updated_at: '2023-07-01T12:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      component_id:
                        type: integer
                        example: 1
                      component_name:
                        type: string
                        example: Logo
                      category_id:
                        type: integer
                        example: 1
                      component_description:
                        type: string
                        example: 'Company logo for header'
                      component_cost:
                        type: string
                        example: '50.00'
                      category:
                        type: object
                        properties:
                          category_id:
                            type: integer
                            example: 1
                          category_name:
                            type: string
                            example: Header
                          created_at:
                            type: string
                            example: '2023-07-01T12:00:00Z'
                          updated_at:
                            type: string
                            example: '2023-07-01T12:30:00Z'
                      created_at:
                        type: string
                        example: '2023-07-01T12:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-01T12:30:00Z'
      tags:
        - 'Website Components'
      security: []
    put:
      summary: 'Update a website component'
      operationId: updateAWebsiteComponent
      description: 'Update details of a specific website component.'
      parameters:
        -
          in: query
          name: component_id
          description: 'The ID of the website component.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    component_id: 1
                    component_name: 'Updated Logo'
                    category_id: 1
                    component_description: 'Updated company logo for header'
                    component_cost: '60.00'
                    category:
                      category_id: 1
                      category_name: Header
                      created_at: '2023-07-01T12:00:00Z'
                      updated_at: '2023-07-01T12:30:00Z'
                    created_at: '2023-07-01T12:00:00Z'
                    updated_at: '2023-07-03T09:30:00Z'
                properties:
                  data:
                    type: object
                    properties:
                      component_id:
                        type: integer
                        example: 1
                      component_name:
                        type: string
                        example: 'Updated Logo'
                      category_id:
                        type: integer
                        example: 1
                      component_description:
                        type: string
                        example: 'Updated company logo for header'
                      component_cost:
                        type: string
                        example: '60.00'
                      category:
                        type: object
                        properties:
                          category_id:
                            type: integer
                            example: 1
                          category_name:
                            type: string
                            example: Header
                          created_at:
                            type: string
                            example: '2023-07-01T12:00:00Z'
                          updated_at:
                            type: string
                            example: '2023-07-01T12:30:00Z'
                      created_at:
                        type: string
                        example: '2023-07-01T12:00:00Z'
                      updated_at:
                        type: string
                        example: '2023-07-03T09:30:00Z'
      tags:
        - 'Website Components'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component_name:
                  type: string
                  description: 'The name of the website component.'
                  example: 'Updated Logo'
                category_id:
                  type: integer
                  description: 'The ID of the website component category.'
                  example: 1
                component_description:
                  type: string
                  description: 'The description of the website component.'
                  example: 'Updated company logo for header'
                component_cost:
                  type: numeric
                  description: 'The cost of the website component.'
                  example: '60.00'
              required:
                - component_name
                - category_id
                - component_description
                - component_cost
      security: []
    delete:
      summary: 'Delete a website component'
      operationId: deleteAWebsiteComponent
      description: 'Delete a specific website component.'
      parameters:
        -
          in: query
          name: component_id
          description: 'The ID of the website component.'
          example: '1'
          required: true
          schema:
            type: string
            description: 'The ID of the website component.'
            example: '1'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Website component deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Website component deleted successfully'
      tags:
        - 'Website Components'
      security: []
    parameters:
      -
        in: path
        name: component_id
        description: 'The ID of the component.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Authentication
    description: "\nAPIs for user registration"
  -
    name: Deliverable
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Meeting Summery'
    description: ''
  -
    name: 'Problems and Goals'
    description: ''
  -
    name: 'Project Components'
    description: "\nAPIs for managing project components."
  -
    name: 'Project Overview'
    description: ''
  -
    name: Projects
    description: "\nAPIs for managing projects."
  -
    name: 'Prompts Management'
    description: '* @queryParam page integer page number.'
  -
    name: 'SOW Meeting Summery'
    description: ''
  -
    name: 'Scope Of Work'
    description: ''
  -
    name: 'Service Deliverable Tasks'
    description: "\nAPIs for managing service deliverable tasks."
  -
    name: 'Service Deliverables'
    description: "\nAPIs for managing service deliverables."
  -
    name: 'Service Scopes'
    description: "\nAPIs for managing service scopes."
  -
    name: Services
    description: "\nAPIs for website services."
  -
    name: 'Website Component Categories'
    description: "\nAPIs for managing website component categories."
  -
    name: 'Website Components'
    description: "\nAPIs for managing website components."
